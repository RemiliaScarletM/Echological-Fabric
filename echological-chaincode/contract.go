package main

import (
	"fmt"
	"encoding/json"
	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// ServerConfig for external chaincode
type ServerConfig struct {
	CCID string
	Address string
}

// SmartContract provides functions for managing food supply chain
type SmartContract struct {
	contractapi.Contract
}

// FoodCert describes basic details of food supply chain management
type FoodCert struct {
	Product_ID      string       `json:"Id"`
	Species        string       `json:"Species"`
	Seed_Supplier            string       `json:"SeedSupplier"`
	DNA_Profile     string       `json:"DNAProfile"`
	Owner_ID string       `json:"Owner"`
	Status          string       `json:"Status"`
	FoodCertHolder string `json:"FoodCertHolder"`
}


// QueryFoodCert struct used for handling result of query
type QueryFoodCert struct {
	Key string `json:"foodCertKey"`
	Cert *FoodCert
}

// ShippingBill describes basic details of bill generated by shipper
type ShippingBill struct {
	ShippingCost int `json:"shippingCost"`
	Address string `json:"address"`
	EstimatedDeliveryDate string `json:"estimatedDeliveryDate"`
	BillHolder string `json:"billHolder"`
}

// QueryShippingBill struct used to handle result query
type QueryShippingBill struct {
	Key string `json:"ShippingBillKey"`
	Bill *ShippingBill
}

// ApprovalCert describes basic details of approval certificate from custom
type ApprovalCert struct {
	Status string `json:"status"`
	Date string `json:"dateofIssueCustomCert"`
	ApprovalCertHolder string `json:"approvalCertHolder"`
}

// QueryApprovalCert struct used to handle result query
type QueryApprovalCert struct {
	Key string `json:"ApprovalCertKey"`
	Cert *ApprovalCert
}

// QueryFoodCertAndShippingBillAndApprovalCert is the combination of food certificate and respective shipping bill
type QueryFoodCertAndShippingBillAndApprovalCert struct{
	FoodCert *FoodCert
	Bill *ShippingBill
	ApprovalCert *ApprovalCert
}

// GenerateFoodCert creates the certificate of food batch manufactured by IndonesianFarm
func (s *SmartContract) GenerateFoodCert(ctx contractapi.TransactionContextInterface, Id string, Species string, SeedSupplier string, DNA_Profile string, Owner string, Status string) error {
	foodCert := FoodCert{
		Product_ID: Id,
		Species: Species,
		Seed_Supplier: SeedSupplier,
		DNA_Profile: DNA_Profile,
		Owner_ID: Owner,
		Status: Status,
	}

	foodCertAsBytes, _ := json.Marshal(foodCert)

	return ctx.GetStub().PutState(Id, foodCertAsBytes)
}

// QueryGeneratedFoodCert returns the batch of food stored in the world state with given food batch number
func (s *SmartContract) QueryGeneratedFoodCert(ctx contractapi.TransactionContextInterface, Id string) (*FoodCert, error) {
	foodCertAsBytes, err := ctx.GetStub().GetState(Id)
	
	if err != nil {
		return nil, fmt.Errorf("Failed to read from world state. %s", err.Error())
	}

	if foodCertAsBytes == nil {
		return nil, fmt.Errorf("%s does not exist", Id)
	}

	foodCert := new(FoodCert)
	_ = json.Unmarshal(foodCertAsBytes, foodCert)

	return foodCert, nil
}

// QueryAllGeneratedFoodCerts returns all generated certificates of all food batch found in world state
func (s *SmartContract) QueryAllGeneratedFoodCerts(ctx contractapi.TransactionContextInterface) ([]QueryFoodCert, error) {
	startKey := ""
	endKey := ""

	resultsIterator, err := ctx.GetStub().GetStateByRange(startKey, endKey)

	if err != nil {
		return nil, err
	}
	defer resultsIterator.Close()

	results := []QueryFoodCert{}

	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()

		if err != nil {
			return nil, err
		}

		foodCert := new(FoodCert)
		_ = json.Unmarshal(queryResponse.Value, foodCert)

		queryFoodCert := QueryFoodCert{Key: queryResponse.Key, Cert: foodCert}
		results = append(results, queryFoodCert)
	}

	return results, nil
}

// TransferFoodCert changes the holder of food certificate
func (s *SmartContract) TransferFoodCert(ctx contractapi.TransactionContextInterface, Id string, newFoodCertHolder string) error {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)

	if err != nil {
		return err
	}


	foodCert.FoodCertHolder = newFoodCertHolder

	foodCertAsBytes, _ := json.Marshal(foodCert)

	return ctx.GetStub().PutState(Id, foodCertAsBytes)
}

// GenerateShippingBill adds shipping bill to the world state with given details after verifying the holder of food certificate 
func (s *SmartContract) GenerateShippingBill(ctx contractapi.TransactionContextInterface, Id string, billNumber string, shippingCost int, address string, estimatedDeliveryDate string) error {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)

	if err != nil {
		return err
	}

	if foodCert.FoodCertHolder != "food shipper" {
		return fmt.Errorf("Invalid certificate holder of %s", Id)
	}

	foodCertHolder := foodCert.FoodCertHolder

	bill := ShippingBill{
		ShippingCost: shippingCost,
		Address: address,
		EstimatedDeliveryDate: estimatedDeliveryDate,
		BillHolder: foodCertHolder,
	}

	billAsBytes, _ := json.Marshal(bill)

	return ctx.GetStub().PutState(billNumber, billAsBytes)
}

// QueryGeneratedShippingBill returns the bill stored in the world state with given food batch number
func (s *SmartContract) QueryGeneratedShippingBill(ctx contractapi.TransactionContextInterface, Id string, billNumber string) (*ShippingBill, error) {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)

	if err != nil {
		return nil, err
	}

	billAsBytes, err1 := ctx.GetStub().GetState(billNumber)

	if err1 != nil {
		return nil, fmt.Errorf("Failed to read from world state. %s", err.Error())
	}

	if billAsBytes == nil {
		return nil, fmt.Errorf("%s does not exist", billNumber)
	}

	bill := new(ShippingBill)
	_ = json.Unmarshal(billAsBytes, bill)

	if foodCert.FoodCertHolder != bill.BillHolder {
		return nil ,fmt.Errorf("Invalid certificate holder of %s", Id)
	}

	return bill, nil
}

// TransferFoodCertAndShippingBill updates the holder of the food certificate and shipping bill
func (s *SmartContract) TransferFoodCertAndShippingBill(ctx contractapi.TransactionContextInterface, Id string, billNumber string, newBillHolder string) (error, error) {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)
	
	if err != nil {
		return err, nil
	}

	bill, err2 := s.QueryGeneratedShippingBill(ctx, Id, billNumber)

	if err2!= nil {
		return nil, err2
	}

	if foodCert.FoodCertHolder != bill.BillHolder {
		return nil, fmt.Errorf("Invalid certificate holder of %s", Id)
	}

	foodCert.FoodCertHolder = newBillHolder
	bill.BillHolder = newBillHolder

	foodCertAsBytes, _ := json.Marshal(foodCert)
	billAsBytes, _ := json.Marshal(bill)

	return ctx.GetStub().PutState(Id, foodCertAsBytes), ctx.GetStub().PutState(billNumber, billAsBytes)
}

// GenerateApprovalCert adds approval certificate to the world state with given details
func (s *SmartContract) GenerateApprovalCert(ctx contractapi.TransactionContextInterface, Id string, billNumber string, approvalCertNumber string, status string, date string, approvalCertHolder string) error {

	bill, err := s.QueryGeneratedShippingBill(ctx, Id, billNumber)

	if err != nil {
		return err
	}

	approvalCert := ApprovalCert{
		Status: status,
		Date: date,
		ApprovalCertHolder: approvalCertHolder,
	}

	if bill.BillHolder != approvalCert.ApprovalCertHolder {
		return fmt.Errorf("Invalid certificate holder of %s", approvalCertNumber)
	}

	approvalCertAsBytes, _ := json.Marshal(approvalCert)

	return ctx.GetStub().PutState(approvalCertNumber ,approvalCertAsBytes)
}

// QueryGeneratedApprovalCert returns the approval certificate stored in the world state with given approval certificate key
func (s *SmartContract) QueryGeneratedApprovalCert(ctx contractapi.TransactionContextInterface, Id string, billNumber string, approvalCertNumber string) (*ApprovalCert, error) {
	bill, err := s.QueryGeneratedShippingBill(ctx, Id, billNumber)

	if err != nil {
		return nil, err
	}

	approvalCertAsBytes, err3 := ctx.GetStub().GetState(approvalCertNumber)

	if err3 != nil {
		return nil, fmt.Errorf("Failed to read from world state. %s", err.Error())
	}

	if approvalCertAsBytes == nil {
		return nil, fmt.Errorf("%s does not exist", approvalCertNumber)
	}

	approvalCert := new(ApprovalCert)
	_ = json.Unmarshal(approvalCertAsBytes, approvalCert)

	if bill.BillHolder != approvalCert.ApprovalCertHolder{
		return nil, fmt.Errorf("Invalid certificate holder of %s", billNumber)
	}

	return approvalCert, nil
}

// TransferFoodCertAndShippingBillAndApprovalCert updates the approval certificate holder with given 
func (s *SmartContract) TransferFoodCertAndShippingBillAndApprovalCert(ctx contractapi.TransactionContextInterface, Id string, billNumber string, approvalCertNumber string, newApprovalHolder string) error {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)

	if err != nil {
		return err
	}

	bill, err2 := s.QueryGeneratedShippingBill(ctx, Id, billNumber)

	if err2 != nil {
		return err2
	}

	approvalCert, err3:= s.QueryGeneratedApprovalCert(ctx, Id, billNumber, approvalCertNumber)

	if err3 != nil {
		return err3
	}

	foodCert.FoodCertHolder = newApprovalHolder
	bill.BillHolder = newApprovalHolder
	approvalCert.ApprovalCertHolder = newApprovalHolder

	foodCertAsBytes, _ := json.Marshal(foodCert)
	billAsBytesNew, _ := json.Marshal(bill)
	approvalCertAsBytes, _ := json.Marshal(approvalCert)


	err4 := ctx.GetStub().PutState(Id ,foodCertAsBytes)

	returnErr := new(error)
	if err4 != nil {
		returnErr = &err4
	}

	err5 := ctx.GetStub().PutState(billNumber ,billAsBytesNew)

	if err5 != nil && err4 != nil{
		returnErr = &err5
	}

	err6 := ctx.GetStub().PutState(approvalCertNumber ,approvalCertAsBytes)

	if err6 != nil && err5 != nil && err4 != nil {
		returnErr = &err6
	}

	return *returnErr
}

// GetAllDocs returns all three documents (food certificate, shipping bill and approval certificate) to the importer
func (s *SmartContract) GetAllDocs(ctx contractapi.TransactionContextInterface, Id string, billNumber string, approvalCertNumber string) (*QueryFoodCertAndShippingBillAndApprovalCert, error) {
	foodCert, err := s.QueryGeneratedFoodCert(ctx, Id)
	
	if err != nil {
		return nil, err
	}

	bill, err2 := s.QueryGeneratedShippingBill(ctx, Id, billNumber)

	if err2 != nil {
		return nil, err2
	}

	approvalCert, err3 := s.QueryGeneratedApprovalCert(ctx, Id, billNumber, approvalCertNumber)

	if err3 != nil {
		return nil, err3
	}

	allDocs := new(QueryFoodCertAndShippingBillAndApprovalCert)
	allDocs.FoodCert = foodCert
	allDocs.Bill = bill
	allDocs.ApprovalCert = approvalCert

	return allDocs, nil
}

func main() {
	smartContract := new(SmartContract)

	cc, err := contractapi.NewChaincode(smartContract)

	if err != nil {
		panic(err.Error())
	}

	if err := cc.Start(); err != nil {
		panic(err.Error())
	}
}
